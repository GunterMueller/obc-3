#
# makeprims.tcl
# 
# This file is part of the Oxford Oberon-2 compiler
# Copyright (c) 2006--2016 J. M. Spivey
# All rights reserved
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#
# 1. Redistributions of source code must retain the above copyright notice,
#    this list of conditions and the following disclaimer.
# 2. Redistributions in binary form must reproduce the above copyright notice,
#    this list of conditions and the following disclaimer in the documentation
#    and/or other materials provided with the distribution.
# 3. The name of the author may not be used to endorse or promote products
#    derived from this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
# IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
# OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
# IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
# SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
# PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
# OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
# WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
# OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
# ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#

# This script scans the files of Oberon code that make up the standard
# library, and extracts the C routines that implement primitives.

set mode "gen"
set prims {}

proc out {line} {
    global mode

    if {$mode == "gen"} {
	puts $line
    }
}

proc init {} {
    out "/* Generated by makeprims.tcl */"
    out ""
    out "#include \"obx.h\""
    out ""
    out "#define args (bp + HEAD)"
}

proc make_prim {pname code} {
    global prims

    lappend prims $pname

    out ""
    out "PRIMDEF void ${pname}(value *sp) {"
    out "     value UNUSED *bp = sp;"
    out "     value UNUSED *cp = valptr(bp\[CP\]);"
    out "     FPINIT;"
    out $code
    out "}"
}

# count -- number of occurrences of a char in a string
proc count {ch s} {return [regexp -all $ch $s]}

proc scanfile {fn} {
    set f [open $fn "r"]
    set lnum 0

    while {[gets $f line] >= 0} {
	incr lnum;

	if {[regexp {^PROCEDURE} $line]} {
	    # Read more lines until parentheses are balanced
	    while {[count "\\(" $line] != [count "\\)" $line]} {
		if {[gets $f line2] < 0} break
		incr lnum
		append line " " $line2
	    }
	    regexp {^PROCEDURE.*IS "\*?(.*)"} $line _ pname
	} elseif {[regexp {^\(\* CODE *(.*)} $line _ code]} {
	    if {$code != ""} {
		set code "#line $lnum \"$fn\"\n     $code"
	    }

	    while {! [regexp {\*\)} $code]} {
		if {[gets $f line] < 0} {
		    puts stderr "Unterminated chunk in $fn"
		    exit 1
		}

		incr lnum;

		if {$code == ""} {
		    set code "#line $lnum \"$fn\"\n$line"
		} else {
		    set code "$code\n$line"
		}
	    }

	    regsub "\[ \n\]*\\*\\)\[ \t\]*\$" $code "" code

	    make_prim $pname $code
	} elseif {[regexp {^\(\* COPY *(.*)} $line _ code]} {
	    set code "#line $lnum \"$fn\"\n$code"

	    while {! [regexp {\*\)} $code]} {
		if {[gets $f line] < 0} {
		    puts stderr "Unterminated chunk in $fn"
		    exit 1
		}

		incr lnum
		# regsub "^\[ \t\]*" $line "" line
		set code "$code\n$line"
	    }

	    regsub "\[ \n\]*\\*\\)\[ \t\]*\$" $code "" code
	    out ""
	    out $code
	}
    }

    close $f
}

proc maketable {} {
    global prims

    puts "/* primtab.c */"
    puts ""
    puts "#include \"obx.h\""
    puts ""
    puts -nonewline "PRIMDEF primitive"
    set sep ""
    foreach p $prims {
	puts $sep
	puts -nonewline "     $p"
	set sep ","
    }
    puts ";"
    puts ""
    puts "struct primdef primtab\[\] = {"
    foreach p $prims {
	puts "     { \"$p\", $p },"
    }
    puts "     { NULL, NULL }"
    puts "};"
}

if {[lindex $argv 0] == "-t"} {
    set mode "table"
    set argv [lrange $argv 1 end]
}

init

foreach fn $argv {scanfile $fn}

if {$mode == "table"} maketable
