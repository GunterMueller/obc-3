#
# @configure_input@
#
# compiler/Makefile.in
# 
# This file is part of the Oxford Oberon-2 compiler
# Copyright (c) 2006--2016 J. M. Spivey
# All rights reserved
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#
# 1. Redistributions of source code must retain the above copyright notice,
#    this list of conditions and the following disclaimer.
# 2. Redistributions in binary form must reproduce the above copyright notice,
#    this list of conditions and the following disclaimer in the documentation
#    and/or other materials provided with the distribution.
# 3. The name of the author may not be used to endorse or promote products
#    derived from this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
# IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
# OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
# IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
# SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
# PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
# OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
# WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
# OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
# ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#

# Config stuff
OCAMLC = ocamlc
OCAMLLEX = ocamllex
MYACC = ../yacc/myacc
CAMLDEP = @top_srcdir@/camldep
MLFLAGS = @MLFLAGS@
TCLSH = tclsh
PACKAGE_VERSION = @PACKAGE_VERSION@
top_srcdir = @top_srcdir@
srcdir = @srcdir@
subdir = compiler
SHELL = /bin/sh
EXEEXT = @EXEEXT@
VPATH = @srcdir@
DEPEND = @DEPEND@
COMPAT = @COMPAT@
# End

all : obc1 obb1

INCLUDE = -I ../mllib -I ../yacc

OBC1 = ../mllib/mllib.cma ../yacc/yyparse.cmo basis.cma compiler.cma main.cmo 
obc1: $(OBC1)
	$(OCAMLC) $(MLFLAGS) -custom $^ -o $@

OBB1 = ../mllib/mllib.cma ../yacc/yyparse.cmo basis.cma browser.cmo
obb1: $(OBB1)
	$(OCAMLC) $(MLFLAGS) -custom $^ -o $@

COMPILER = icode.cmo peepopt.cmo tree.cmo lexer.cmo \
	parser.cmo expr.cmo inicheck.cmo check.cmo switch.cmo \
	stack.cmo igen.cmo  
compiler.cma: $(COMPILER)
	$(OCAMLC) $(MLFLAGS) -a $^ -o $@ 

BASIS = config.cmo symtab.cmo revid.cmo eval.cmo mach.cmo error.cmo \
	gcmap.cmo dict.cmo symlex.cmo symparse.cmo symfile.cmo
basis.cma: $(BASIS)
	$(OCAMLC) $(MLFLAGS) -a -o $@ $^

REVID := $(shell cat ../revid)

revid.ml: ../revid
	echo "let hash = \"$(REVID)\"" >$@

## Rules

# It's OK to use the 'aggressive' (Bison-like) scheme for default reductions.
%.ml %.mli: %.mly
	$(MYACC) -a -v $<

%.ml: %.mll
	$(OCAMLLEX) -o $@ $<

%.cmi: %.mli
	$(OCAMLC) $(MLFLAGS) $(INCLUDE) -c -o $@ $<

%.cmo: %.ml
	$(OCAMLC) $(MLFLAGS) $(INCLUDE) -c -o $@ $<

.DELETE_ON_ERROR:

## Cleanup

GEN = parser.mli parser.ml lexer.ml symparse.mli symparse.ml \
	symlex.ml revid.ml

# clean: remove object files
clean:
	rm -f $(patsubst %,%$(EXEEXT),obc1 obb1)
	rm -f *.cmi *.cmo *.cma 
	rm -f parser.output symparse.output

# quiteclean: remove generated files too
quiteclean: clean
	rm -f $(GEN)

# distclean: also remove all non-distributed files
distclean: quiteclean
	rm -f Makefile config.ml

realclean: distclean
	rm -f $(srcdir)/Depend

## Configuration and dependencies

Makefile: $(srcdir)/Makefile.in ../config.status
	cd .. && ./config.status $(subdir)/$@

config.ml: $(srcdir)/config.ml.in ../config.status
	cd .. && ./config.status --file=$(subdir)/$@

ML = check.mli dict.mli eval.mli icode.mli \
	igen.mli mach.mli tree.mli check.ml dict.ml eval.ml \
	icode.ml igen.ml mach.ml main.ml tree.ml \
	expr.mli expr.ml symtab.mli error.mli error.ml switch.mli \
	switch.ml symtab.ml peepopt.mli peepopt.ml \
	symfile.mli symfile.ml browser.ml \
	lexer.ml symlex.ml config.ml inicheck.mli inicheck.ml \
	stack.mli stack.ml gcmap.mli gcmap.ml
EXTRAML = parser.mli parser.ml symparse.mli symparse.ml revid.ml

.SECONDARY: $(EXTRAML)

ifdef DEPEND
$(srcdir)/Depend: $(ML)
	$(CAMLDEP) $(INCLUDE) $(EXTRAML:%=-f %) -x Bytes $^ >$@
endif
 
include $(srcdir)/Depend

# Don't use dependency generation for yacc scripts -- yacc may not be built
parser.cmo    : dict.cmi error.cmi lexer.cmo parser.cmi
parser.cmi    : eval.cmi symtab.cmi tree.cmi
symparse.cmo  : config.cmo error.cmi eval.cmi mach.cmi \
		symparse.cmi symtab.cmi
symparse.cmi  : dict.cmi
